###############################################################################################
## Script for finding the worst case by using incremental compile and very tight constraints ##
###############################################################################################

####### Analyze files and elaborate top level
analyze -library WORK -format vhdl {../../common/unpackfp_unpackfp.vhd}
analyze -library WORK -format vhdl {../../common/packfp_packfp.vhd}
analyze -library WORK -format vhdl {../../common/fpnormalize_fpnormalize.vhd}
analyze -library WORK -format vhdl {../../common/fpround_fpround.vhd}
analyze -library WORK -format vhdl {../../mbe/my_pkg.vhd}
analyze -library WORK -format vhdl {../../mbe/fast_adder/constants.vhd}
analyze -library WORK -format vhdl {../../mbe/fast_adder/G_general.vhd}
analyze -library WORK -format vhdl {../../mbe/fast_adder/PG_GENERAL.vhd}
analyze -library WORK -format vhdl {../../mbe/fast_adder/pg_net.vhd}
analyze -library WORK -format vhdl {../../mbe/fast_adder/mux21_generic.vhd}
analyze -library WORK -format vhdl {../../mbe/fast_adder/fa.vhd}
analyze -library WORK -format vhdl {../../mbe/fast_adder/RCA_generic.vhd}
analyze -library WORK -format vhdl {../../mbe/fast_adder/carry_generator.vhd}
analyze -library WORK -format vhdl {../../mbe/fast_adder/carry_select.vhd}
analyze -library WORK -format vhdl {../../mbe/fast_adder/sum_generator.vhd}
analyze -library WORK -format vhdl {../../mbe/fast_adder/p4_adder.vhd}
analyze -library WORK -format vhdl {../../mbe/HA.vhd}
analyze -library WORK -format vhdl {../../mbe/ENC.vhd}
analyze -library WORK -format vhdl {../../mbe/MBE.vhd}
analyze -library WORK -format vhdl {../fpmul_stage1_struct.vhd}
analyze -library WORK -format vhdl {../fpmul_stage2_struct.vhd}
analyze -library WORK -format vhdl {../fpmul_stage3_struct.vhd}
analyze -library WORK -format vhdl {../fpmul_stage4_struct.vhd}
analyze -library WORK -format vhdl {../fpmul_pipeline.vhd}

elaborate FPmul -architecture pipeline

# Min clock period that will be the "unachievable constraint"
set min_clk_period 0.1 

####### First compilation using the "unachievable constraint"
set clk_period $min_clk_period
create_clock -name MY_CLK -period $clk_period clk
set_max_delay $clk_period -from [all_inputs]
set_max_delay $clk_period -to [all_outputs]
set_max_delay $clk_period -from [all_inputs] -to [all_outputs]
set_dont_touch_network MY_CLK
set_clock_uncertainty 0.07 [get_clocks MY_CLK]
set OLOAD [load_of NangateOpenCellLibrary/BUF_X4/A]
set_load $OLOAD [all_outputs]

compile -map_effort high

####### Calculating new clk period based on the results of the first compilation
set worst_path [get_timing_path]
set slack [get_attribute $worst_path slack]
set sorted_sl [lsort -real -increasing $slack]
set worst_slack [lindex $sorted_sl 0]
####### Set new clk period based on the previous calculation
set clk_period_new [expr $clk_period-$worst_slack]
create_clock -name MY_CLK -period $clk_period_new clk
set_max_delay $clk_period_new -from [all_inputs]
set_max_delay $clk_period_new -to [all_outputs]
set_max_delay $clk_period_new -from [all_inputs] -to [all_outputs]
set_dont_touch_network MY_CLK
set_clock_uncertainty 0.07 [get_clocks MY_CLK]
set OLOAD [load_of NangateOpenCellLibrary/BUF_X4/A]
set_load $OLOAD [all_outputs]

####### Second compilation, for a constraint that is achievable
compile -incremental_mapping

####### Saving outputs
report_timing > ./timings/timing_beforeRetime_noP4add.txt
report_area > ./areas/area_beforeRetime_noP4add.txt
write -hierarchy -format vhdl -output ./netlist/fpmul_pipeline_mbe_postsyn_beforeRetime_noP4add.vhdl

####### Reset the clock period to the "unachievable constraint" 
set clk_period $min_clk_period
create_clock -name MY_CLK -period $clk_period clk
set_max_delay $clk_period -from [all_inputs]
set_max_delay $clk_period -to [all_outputs]
set_max_delay $clk_period -from [all_inputs] -to [all_outputs]
set_dont_touch_network MY_CLK
set_clock_uncertainty 0.07 [get_clocks MY_CLK]
set OLOAD [load_of NangateOpenCellLibrary/BUF_X4/A]
set_load $OLOAD [all_outputs]

####### Optimize registers using the unachievable constraint
optimize_registers

####### Calculating new clk period based on the results of the first compilation
set worst_path [get_timing_path]
set slack [get_attribute $worst_path slack]
set sorted_sl [lsort -real -increasing $slack]
set worst_slack [lindex $sorted_sl 0]
set clk_period_new [expr $clk_period-$worst_slack]
####### Set new clk period based on the previous calculation
create_clock -name MY_CLK -period $clk_period_new clk
set_max_delay $clk_period_new -from [all_inputs]
set_max_delay $clk_period_new -to [all_outputs]
set_max_delay $clk_period_new -from [all_inputs] -to [all_outputs]
set_dont_touch_network MY_CLK
set_clock_uncertainty 0.07 [get_clocks MY_CLK]
set OLOAD [load_of NangateOpenCellLibrary/BUF_X4/A]
set_load $OLOAD [all_outputs]

####### Second compilation, for a constraint that is achievable
compile -incremental_mapping

####### Saving outputs
report_timing > ./timings/timing_afterRetime_noP4add.txt
report_area > ./areas/area_afterRetime_noP4add.txt
write -hierarchy -format vhdl -output ./netlist/fpmul_pipeline_mbe_postsyn_afterRetime_noP4add.vhdl

